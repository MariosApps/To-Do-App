{"version":3,"sources":["Tasks.js","AddTask.js","App.js","serviceWorker.js","index.js"],"names":["Tasks","_ref","tasks","removeTask","tasksList","addClass","length","map","item","react_default","a","createElement","key","id","className","task","onClick","AddTask","state","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","addTask","onSubmit","this","type","placeholder","onChange","Component","App","filter","Math","random","Object","toConsumableArray","concat","src_Tasks","src_AddTask","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAsBeA,EAlBD,SAAAC,GAAmC,IAAjCC,EAAiCD,EAAjCC,MAAOC,EAA0BF,EAA1BE,WACbC,GADuCH,EAAdI,SACbH,EAAMI,OACpBJ,EAAMK,IAAI,SAAAC,GACN,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAKK,GAAIC,UAAU,mBACzBL,EAAAC,EAAAC,cAAA,UAAKH,EAAKO,KAAKN,EAAAC,EAAAC,cAAA,KAAGG,UAAU,mCAAmCE,QAAS,WAAOb,EAAWK,EAAKK,MAAhF,cAK3BJ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,MAAIG,UAAU,0BAAd,+BAET,OACQL,EAAAC,EAAAC,cAAA,WAAMP,ICaHa,6MA1BXC,MAAQ,CACJH,KAAM,MAEVI,aAAe,SAACC,GACZC,EAAKC,SAAS,CACVP,KAAMK,EAAEG,OAAOC,WAGvBC,aAAe,SAACL,GACZA,EAAEM,iBACFL,EAAKM,MAAMC,QAAQP,EAAKH,OACxBG,EAAKC,SAAS,CACVP,KAAM,8EAIV,OACIN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMkB,SAAUC,KAAKL,cACjBhB,EAAAC,EAAAC,cAAA,SAAOoB,KAAK,OAAOC,YAAY,eAAeC,SAAUH,KAAKX,aAAcK,MAAOM,KAAKZ,MAAMH,gBApB3FmB,aCsCPC,6MApCbjB,MAAQ,CACNhB,MAAQ,CACN,CAAEa,KAAM,cAAeF,GAAI,GAC3B,CAAEE,KAAM,WAAYF,GAAI,OAG5BV,WAAa,SAACU,GACZ,IAAIX,EAAQmB,EAAKH,MAAMhB,MAAMkC,OAAO,SAAArB,GAClC,OAAOA,EAAKF,KAAOA,IAErBQ,EAAKC,SAAS,CACZpB,MAAOA,OAIX0B,QAAU,SAACb,GACTA,EAAKF,GAAKwB,KAAKC,SACf,IAAMpC,EAAKqC,OAAAC,EAAA,EAAAD,CAAOlB,EAAKH,MAAMhB,OAAlBuC,OAAA,CAAyB1B,IACpCM,EAAKC,SAAS,CACZpB,MAAOA,6EAKT,OACEO,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,iCAAd,cACAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACbL,EAAAC,EAAAC,cAAC+B,EAAD,CAAOxC,MAAO4B,KAAKZ,MAAMhB,MAAOC,WAAY2B,KAAK3B,WAAYE,SAAUyB,KAAKzB,YAE9EI,EAAAC,EAAAC,cAACgC,EAAD,CAASf,QAASE,KAAKF,kBA/BbM,aCMEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4aab2719.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Tasks = ({tasks, removeTask, addClass}) => {\r\n    const tasksList = tasks.length ? (\r\n        tasks.map(item => {\r\n            return (\r\n                <div key={item.id} className=\"collection-item\">\r\n                    <h5>{item.task}<i className=\"material-icons secondary-content\" onClick={() => {removeTask(item.id)}}>delete</i></h5>\r\n                </div>\r\n            )\r\n        })\r\n    ) : (\r\n        <div><h5 className=\"center collection-item\">You don't have any tasks!</h5></div>\r\n    )\r\n    return(\r\n            <div>{tasksList}</div>\r\n    )\r\n}\r\n\r\n\r\nexport default Tasks","import React, { Component } from 'react';\r\n\r\n\r\nclass AddTask extends Component {\r\n    state = {\r\n        task: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            task: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTask(this.state);\r\n        this.setState({\r\n            task: ''\r\n        })\r\n    } \r\n    render() {\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" placeholder=\"Add new task\" onChange={this.handleChange} value={this.state.task}/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTask","import React, { Component } from 'react';\nimport Tasks from './Tasks';\nimport AddTask from './AddTask';\n\nclass App extends Component {\n  state = {\n    tasks : [\n      { task: 'Learn React', id: 1},\n      { task: 'Find Job', id: 2}\n    ]\n  }\n  removeTask = (id) => {\n    let tasks = this.state.tasks.filter(task => {\n      return task.id !== id;\n    })\n    this.setState({\n      tasks: tasks\n    })\n  }\n\n  addTask = (task) => {\n    task.id = Math.random();\n    const tasks = [...this.state.tasks, task];\n    this.setState({\n      tasks: tasks\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h2 className=\"red-text text-darken-2 center\">To-Do-List</h2>\n        <div className=\"collection\">\n          <Tasks tasks={this.state.tasks} removeTask={this.removeTask} addClass={this.addClass}/>\n        </div>\n        <AddTask addTask={this.addTask}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}